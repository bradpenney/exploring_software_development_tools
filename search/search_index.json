{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-exploring-software-development-tools","title":"Welcome to Exploring Software Development Tools","text":"<p>A subsection of BradPenney.io, this is a friendly guide through the world of command-line magic and automation awesomeness! \ud83e\uddf0\ud83d\ude80</p> <p>This site is dedicated to documenting the best practices, quirks, and superpowers of tools like <code>git</code>, <code>jq</code>, <code>yq</code>, <code>make</code>, <code>gh</code> and other must-haves for developers who want to do more with less typing (and fewer headaches).</p> <p>Whether you\u2019re just getting started or you\u2019ve been piping output into <code>/dev/null</code> for years, I hope you\u2019ll find something here that\u2019s helpful, insightful, or at least good for a smirk. \ud83d\ude04</p>"},{"location":"#topics-to-explore","title":"Topics to Explore \ud83d\udd0d","text":"<ul> <li>Version control with <code>git</code> and helpful branching workflows \ud83c\udf33</li> <li>Slicing and dicing JSON and YAML with <code>jq</code> and <code>yq</code> \ud83e\ude93</li> <li>Automating builds and scripts with <code>make</code> \u2699\ufe0f</li> <li>Tips, tricks, and tiny CLI power moves \u26a1</li> <li>Real-world examples and shell-fu \ud83e\udde0</li> </ul> <p>Stick around \u2014 I\u2019ll keep adding more tools, tutorials, and tangents. Thanks for visiting, and happy hacking! \ud83d\udc4b</p>"},{"location":"git/core_functionality/git_config_files/","title":"Configuration Files for Git","text":"<p>The configuration files for Git are stored in three different locations:</p> <ol> <li>[Optional] System-Wide: located in <code>/etc/gitconfig</code>, settings stored here affect all users    of a system. It is very common for this this file to be empty or non-existent, as    shared computers are relatively rare.</li> <li>User-Specific: stored in <code>~/.gitconfig</code>, the per-user configuration file for <code>git</code>.  This stores information    about the specific user, such as their name and email address.</li> <li>Project-Specific: stored in <code>.git/config</code>, this is the configuration file for a specific project.</li> </ol> <p>The order of precedence for these files is the same as they are listed above. In other words, project-specific configurations override user-specific configurations, which in turn override system-wide configurations.</p>"},{"location":"git/core_functionality/intro_to_git/","title":"What is Git?","text":"<p>Git is a version control system. It tracks changes to text files, so any changes that are made by authors can be reverted at any time.  Its the ideal tool for software developers to collaborate together to create a unified software product.</p> <p>There is an excellent book - Pro Git - that is available for free online.  The goal of this information isn't to replace that book, but rather to simply share some of the commands and tools I find useful when working with Git.</p>"},{"location":"nvim/intro_to_nvim/","title":"What is NeoVim?","text":"<p>NeoVim (NVIM) is an Integrated Development Environment (IDE). In software development, there are endless debates about which IDE is best - some prefer tools like VSCode, or IntelliJ's suite of tools. It seems like the choices are endless. However, I've committed to using NVIM as my primary IDE (for the foreseeable future at least \ud83d\ude1c).</p>"},{"location":"nvim/intro_to_nvim/#why-neovim","title":"Why NeoVim?","text":"<p>The magic of NVIM is that it is modal - meaning that depending on the mode you are in, the keys you press will do different things. For example, in Command mode, presssing <code>D</code> will delete the current line, while in Insert mode, it will insert the letter <code>D</code> at the current cursor position. So switching modes (with <code>Esc</code> by default) gives a second layer of functionality to your keyboard which pretty much equates to superpowers without lifting your fingers from the keyboard.</p> <p>NVIM is a fork of and inherits its magic from Vim, which has been around since the 1990s. NVIM builds on Vim's incredible foundation but has better performance and extensibility. One of the drawbacks of Vim is that it uses VimScript, a Domain Specific Language (DSL) that isn't as powerful or flexible as other programming languages. While NVIM still supports VimScript, it prefers using Lua, a complete and powerful programming language that is easy to learn and use.</p>"},{"location":"nvim/intro_to_nvim/#which-neovim-should-i-use","title":"Which NeoVim Should I Use?","text":"<p>There are many different distributions of NVIM, each with its own set of plugins and configurations. A popular way to get started with NVIM is to use TJ DeVries' NVIM configuration, Kickstart.nvim.</p> <p>For myself, I have been using LazyVim, an opinionated and complete NVIM setup out-of-the-box. It includes a wide range of plugins and configurations designed to be easy and extensible.</p> <p>Here's a screenshot of this file being created in LazyVim:</p> <p></p> Learning Curve <p>While NVIM is a powerful tool, it does have a steep learning curve. It requires a different mindset and approach to text editing compared to traditional IDEs. The modal nature of NVIM can be challenging for new users, but with practice, it becomes second nature.</p>"}]}